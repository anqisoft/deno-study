deno-compile 
UNSTABLE: Compiles the given script into a self contained executable.

  deno compile -A https://deno.land/std/http/file_server.ts
  deno compile --output color_util https://deno.land/std/examples/colors.ts

Any flags passed which affect runtime behavior, such as '--unstable',
'--allow-*', '--v8-flags', etc. are encoded into the output executable and used
at runtime as if they were passed to a similar 'deno run' command.

The executable name is inferred by default: Attempt to take the file stem of the
URL path. The above example would become 'file_server'. If the file stem is
something generic like 'main', 'mod', 'index' or 'cli', and the path has no
parent, take the file name of the parent path. Otherwise settle with the generic
name. If the resulting name has an '@...' suffix, strip it.

Cross-compiling to different target architectures is supported using the
`--target` flag. On the first invocation with deno will download proper binary
and cache it in $DENO_DIR. The aarch64-apple-darwin target is not supported in
canary.

USAGE:
    deno compile [OPTIONS] <SCRIPT_ARG>...

ARGS:
    <SCRIPT_ARG>...
            Script arg

OPTIONS:
    -A, --allow-all
            Allow all permissions

        --allow-env[=<allow-env>...]
            Allow environment access

        --allow-ffi[=<allow-ffi>...]
            Allow loading dynamic libraries

        --allow-hrtime
            Allow high resolution time measurement

        --allow-net[=<allow-net>...]
            Allow network access

        --allow-read[=<allow-read>...]
            Allow file system read access

        --allow-run[=<allow-run>...]
            Allow running subprocesses

        --allow-write[=<allow-write>...]
            Allow file system write access

    -c, --config <FILE>
            The configuration file can be used to configure different aspects of
            deno including TypeScript, linting, and code formatting. Typically
            the configuration file will be called `deno.json` or `deno.jsonc`
            and automatically detected; in that case this flag is not necessary.
            See
            https://deno.land/manual@v1.25.4/getting_started/configuration_file

        --cached-only
            Require that remote dependencies are already cached

        --cert <FILE>
            Load certificate authority from PEM encoded file

        --check[=<CHECK_TYPE>...]
            Type-check modules.
            
            Deno does not type-check modules automatically from v1.23 onwards.
            Pass this flag to enable type-checking or use the 'deno check'
            subcommand.
            
            If the value of '--check=all' is supplied, diagnostic errors from
            remote modules
            will be included.

    -h, --help
            Print help information

        --import-map <FILE>
            Load import map file from local file or remote URL.
              Docs:
            https://deno.land/manual@v1.25.4/linking_to_external_code/import_maps
              Specification: https://wicg.github.io/import-maps/
              Examples: https://github.com/WICG/import-maps#the-import-map

        --location <HREF>
            Value of 'globalThis.location' used by some web APIs

        --lock <FILE>
            Check the specified lock file

        --lock-write
            Write lock file (use with --lock)

        --no-check[=<NO_CHECK_TYPE>...]
            Skip type-checking. If the value of '--no-check=remote' is supplied,
            diagnostic errors from remote modules will be ignored.

        --no-config
            Disable automatic loading of the configuration file.

        --no-npm
            Do not resolve npm modules

        --no-prompt
            Always throw if required permission wasn't passed

        --no-remote
            Do not resolve remote modules

        --node-modules-dir
            Creates a local node_modules folder

    -o, --output <output>
            Output file (defaults to $PWD/<inferred-name>)

    -q, --quiet
            Suppress diagnostic output

    -r, --reload[=<CACHE_BLOCKLIST>...]
            Reload source code cache (recompile TypeScript)
            --reload
              Reload everything
            --reload=https://deno.land/std
              Reload only standard modules
            --reload=https://deno.land/std/fs/utils.ts,https://deno.land/std/fmt/colors.ts
              Reloads specific modules
            --reload=npm:
              Reload all npm modules
            --reload=npm:chalk
              Reload specific npm module

        --seed <NUMBER>
            Set the random number generator seed

        --target <target>
            Target OS architecture
            
            [possible values: x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc,
            x86_64-apple-darwin, aarch64-apple-darwin]

        --unsafely-ignore-certificate-errors[=<HOSTNAMES>...]
            DANGER: Disables verification of TLS certificates

        --unstable
            Enable unstable features and APIs

        --v8-flags=<v8-flags>
            To see a list of all available flags use --v8-flags=--help.
