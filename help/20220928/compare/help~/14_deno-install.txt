deno-install 
Installs a script as an executable in the installation root's bin directory.

  deno install --allow-net --allow-read
https://deno.land/std/http/file_server.ts
  deno install https://deno.land/std/examples/colors.ts

To change the executable name, use -n/--name:

  deno install --allow-net --allow-read -n serve
https://deno.land/std/http/file_server.ts

The executable name is inferred by default:
  - Attempt to take the file stem of the URL path. The above example would
    become 'file_server'.
  - If the file stem is something generic like 'main', 'mod', 'index' or 'cli',
    and the path has no parent, take the file name of the parent path. Otherwise
    settle with the generic name.
  - If the resulting name has an '@...' suffix, strip it.

To change the installation root, use --root:

  deno install --allow-net --allow-read --root /usr/local
https://deno.land/std/http/file_server.ts

The installation root is determined, in order of precedence:
  - --root option
  - DENO_INSTALL_ROOT environment variable
  - $HOME/.deno

These must be added to the path manually if required.

USAGE:
    deno install [OPTIONS] <cmd>...

ARGS:
    <cmd>...
            

OPTIONS:
    -A, --allow-all
            Allow all permissions

        --allow-env[=<allow-env>...]
            Allow environment access

        --allow-ffi[=<allow-ffi>...]
            Allow loading dynamic libraries

        --allow-hrtime
            Allow high resolution time measurement

        --allow-net[=<allow-net>...]
            Allow network access

        --allow-read[=<allow-read>...]
            Allow file system read access

        --allow-run[=<allow-run>...]
            Allow running subprocesses

        --allow-write[=<allow-write>...]
            Allow file system write access

    -c, --config <FILE>
            The configuration file can be used to configure different aspects of
            deno including TypeScript, linting, and code formatting. Typically
            the configuration file will be called `deno.json` or `deno.jsonc`
            and automatically detected; in that case this flag is not necessary.
            See
            https://deno.land/manual@v1.25.4/getting_started/configuration_file

        --cached-only
            Require that remote dependencies are already cached

        --cert <FILE>
            Load certificate authority from PEM encoded file

        --check[=<CHECK_TYPE>...]
            Type-check modules.
            
            Deno does not type-check modules automatically from v1.23 onwards.
            Pass this flag to enable type-checking or use the 'deno check'
            subcommand.
            
            If the value of '--check=all' is supplied, diagnostic errors from
            remote modules
            will be included.

    -f, --force
            Forcefully overwrite existing installation

    -h, --help
            Print help information

        --import-map <FILE>
            Load import map file from local file or remote URL.
              Docs:
            https://deno.land/manual@v1.25.4/linking_to_external_code/import_maps
              Specification: https://wicg.github.io/import-maps/
              Examples: https://github.com/WICG/import-maps#the-import-map

        --inspect[=<HOST:PORT>...]
            Activate inspector on host:port (default: 127.0.0.1:9229)

        --inspect-brk[=<HOST:PORT>...]
            Activate inspector on host:port and break at start of user script

        --location <HREF>
            Value of 'globalThis.location' used by some web APIs

        --lock <FILE>
            Check the specified lock file

        --lock-write
            Write lock file (use with --lock)

    -n, --name <name>
            Executable file name

        --no-check[=<NO_CHECK_TYPE>...]
            Skip type-checking. If the value of '--no-check=remote' is supplied,
            diagnostic errors from remote modules will be ignored.

        --no-config
            Disable automatic loading of the configuration file.

        --no-npm
            Do not resolve npm modules

        --no-prompt
            Always throw if required permission wasn't passed

        --no-remote
            Do not resolve remote modules

        --node-modules-dir
            Creates a local node_modules folder

    -q, --quiet
            Suppress diagnostic output

    -r, --reload[=<CACHE_BLOCKLIST>...]
            Reload source code cache (recompile TypeScript)
            --reload
              Reload everything
            --reload=https://deno.land/std
              Reload only standard modules
            --reload=https://deno.land/std/fs/utils.ts,https://deno.land/std/fmt/colors.ts
              Reloads specific modules
            --reload=npm:
              Reload all npm modules
            --reload=npm:chalk
              Reload specific npm module

        --root <root>
            Installation root

        --seed <NUMBER>
            Set the random number generator seed

        --unsafely-ignore-certificate-errors[=<HOSTNAMES>...]
            DANGER: Disables verification of TLS certificates

        --unstable
            Enable unstable features and APIs

        --v8-flags=<v8-flags>
            To see a list of all available flags use --v8-flags=--help.
