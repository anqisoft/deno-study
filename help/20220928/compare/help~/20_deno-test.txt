deno-test 
Run tests using Deno's built-in test runner.

Evaluate the given modules, run all tests declared with 'Deno.test()' and
report results to standard output:

  deno test src/fetch_test.ts src/signal_test.ts

Directory arguments are expanded to all contained files matching the glob
{*_,*.,}test.{js,mjs,ts,mts,jsx,tsx}:

  deno test src/

USAGE:
    deno test [OPTIONS] [files]... [-- <SCRIPT_ARG>...]

ARGS:
    <files>...
            List of file names to run

    <SCRIPT_ARG>...
            Script arg

OPTIONS:
    -A, --allow-all
            Allow all permissions

        --allow-env[=<allow-env>...]
            Allow environment access

        --allow-ffi[=<allow-ffi>...]
            Allow loading dynamic libraries

        --allow-hrtime
            Allow high resolution time measurement

        --allow-net[=<allow-net>...]
            Allow network access

        --allow-none
            Don't return error code if no test files are found

        --allow-read[=<allow-read>...]
            Allow file system read access

        --allow-run[=<allow-run>...]
            Allow running subprocesses

        --allow-write[=<allow-write>...]
            Allow file system write access

    -c, --config <FILE>
            The configuration file can be used to configure different aspects of
            deno including TypeScript, linting, and code formatting. Typically
            the configuration file will be called `deno.json` or `deno.jsonc`
            and automatically detected; in that case this flag is not necessary.
            See
            https://deno.land/manual@v1.25.4/getting_started/configuration_file

        --cached-only
            Require that remote dependencies are already cached

        --cert <FILE>
            Load certificate authority from PEM encoded file

        --check[=<CHECK_TYPE>...]
            Type-check modules.
            
            Deno does not type-check modules automatically from v1.23 onwards.
            Pass this flag to enable type-checking or use the 'deno check'
            subcommand.
            
            If the value of '--check=all' is supplied, diagnostic errors from
            remote modules
            will be included.

        --coverage=<DIR>
            UNSTABLE: Collect coverage profile data into DIR

        --doc
            UNSTABLE: type-check code blocks

        --fail-fast[=<N>...]
            Stop after N errors. Defaults to stopping after first failure.

        --filter <filter>
            Run tests with this string or pattern in the test name

    -h, --help
            Print help information

        --ignore=<ignore>
            Ignore files

        --import-map <FILE>
            Load import map file from local file or remote URL.
              Docs:
            https://deno.land/manual@v1.25.4/linking_to_external_code/import_maps
              Specification: https://wicg.github.io/import-maps/
              Examples: https://github.com/WICG/import-maps#the-import-map

        --inspect[=<HOST:PORT>...]
            Activate inspector on host:port (default: 127.0.0.1:9229)

        --inspect-brk[=<HOST:PORT>...]
            Activate inspector on host:port and break at start of user script

        --location <HREF>
            Value of 'globalThis.location' used by some web APIs

        --lock <FILE>
            Check the specified lock file

        --lock-write
            Write lock file (use with --lock)

        --no-check[=<NO_CHECK_TYPE>...]
            Skip type-checking. If the value of '--no-check=remote' is supplied,
            diagnostic errors from remote modules will be ignored.

        --no-clear-screen
            Do not clear terminal screen when under watch mode

        --no-config
            Disable automatic loading of the configuration file.

        --no-npm
            Do not resolve npm modules

        --no-prompt
            Always throw if required permission wasn't passed

        --no-remote
            Do not resolve remote modules

        --no-run
            Cache test modules, but don't run tests

        --node-modules-dir
            Creates a local node_modules folder

        --parallel
            Run test modules in parallel. Parallelism defaults to the number of
            available CPUs or the value in the DENO_JOBS environment variable.

    -q, --quiet
            Suppress diagnostic output

    -r, --reload[=<CACHE_BLOCKLIST>...]
            Reload source code cache (recompile TypeScript)
            --reload
              Reload everything
            --reload=https://deno.land/std
              Reload only standard modules
            --reload=https://deno.land/std/fs/utils.ts,https://deno.land/std/fmt/colors.ts
              Reloads specific modules
            --reload=npm:
              Reload all npm modules
            --reload=npm:chalk
              Reload specific npm module

        --seed <NUMBER>
            Set the random number generator seed

        --shuffle[=<NUMBER>...]
            (UNSTABLE): Shuffle the order in which the tests are run

        --trace-ops
            Enable tracing of async ops. Useful when debugging leaking ops in
            test, but impacts test execution time.

        --unsafely-ignore-certificate-errors[=<HOSTNAMES>...]
            DANGER: Disables verification of TLS certificates

        --unstable
            Enable unstable features and APIs

        --v8-flags=<v8-flags>
            To see a list of all available flags use --v8-flags=--help.

        --watch
            Watch for file changes and restart process automatically. Only local
            files from entry point module graph are watched.
